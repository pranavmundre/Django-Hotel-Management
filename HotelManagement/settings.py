"""
Django settings for HotelManagement project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from .env import Credentials as env

# from django.contrib.messages import constants as messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
# in test manage.py runserver --insecure
# DEBUG = False
DEBUG = env.DEBUG

ALLOWED_HOSTS = env.ALLOWED_HOSTS
# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
	# 'bootstrap_admin', # pip install bootstrap-admin
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',

	'AppHotel',
	'AppUser',
	'AppAdmin.apps.AppadminConfig',

	'social_django',
	'rest_framework',
	'api',

	# 'api.apps.apiConfig',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'social_django.middleware.SocialAuthExceptionMiddleware',

]

ROOT_URLCONF = 'HotelManagement.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(BASE_DIR, 'pages')],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',

				'social_django.context_processors.backends',  # <--
				'social_django.context_processors.login_redirect', # <--
			],
		},
	},
]

# WSGI_APPLICATION = 'HotelManagement.wsgi.application'
WSGI_APPLICATION = 'HotelManagement.wsgi.application'

# ------------------------------------------------------------------------------#
# ------------------------------------------------------------------------------#
# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
# Install it for run 
# pip install pymysql
# pip install psycopg2
DATABASES = {
	# 'mysql_db': {
	#     'ENGINE': 'django.db.backends.mysql',
	#     'NAME': 'hotel_django',
	#     'USER': 'root',
	#     'PASSWORD': '',
	#     'HOST': 'localhost',
	#     'PORT': '3306'
	# },
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'NAME': 'django_hotel',
		'USER': 'postgres',
		'PASSWORD': 'root',
		'HOST': 'localhost',
		'PORT': '5432'
	}
}


# ------------------------------------------------------------------------------#
# ------------------------------------------------------------------------------#
# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
	os.path.join(BASE_DIR, 'static/')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR+'/media/'

# New Added
# MESSAGE_TAGS = {
#     messages.ERROR: 'danger',
# }

# ------------------------------------------------------------------------------#
# ------------------------------------------------------------------------------#
AUTHENTICATION_BACKENDS = (
	'social_core.backends.github.GithubOAuth2',
	'social_core.backends.twitter.TwitterOAuth',
	'social_core.backends.facebook.FacebookOAuth2',
	'social_core.backends.instagram.InstagramOAuth2',
	'social_core.backends.google.GoogleOAuth2',
	# 'social.backends.linkedin.LinkedinOAuth2',
	'django.contrib.auth.backends.ModelBackend',
)

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = '/user/'

'''
localhost:8000/oauth/complete/twitter

SOCIAL_AUTH_LOGIN_ERROR_URL = '/settings/'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/settings/'
SOCIAL_AUTH_RAISE_EXCEPTIONS = False

URL For key 
https://www.instagram.com/developer/
https://www.linkedin.com/developers
https://developers.facebook.com/apps
https://console.developers.google.com/apis/credentials
'''

# GitHub Keys
SOCIAL_AUTH_GITHUB_KEY = env.SOCIAL_AUTH_GITHUB_KEY
SOCIAL_AUTH_GITHUB_SECRET = env.SOCIAL_AUTH_GITHUB_SECRET

# Facebook Keys
SOCIAL_AUTH_FACEBOOK_KEY = env.SOCIAL_AUTH_FACEBOOK_KEY
SOCIAL_AUTH_FACEBOOK_SECRET = env.SOCIAL_AUTH_FACEBOOK_SECRET
'''
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email', 'user_link'] # add this
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {       # add this
  'fields': 'id, name, email, picture.type(large), link'
}
SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [                 # add this
	('name', 'name'),
	('email', 'email'),
	('picture', 'picture'),
	('link', 'profile_url'),
]

Instagram Keys

SOCIAL_AUTH_INSTAGRAM_KEY = YOUR_CLIENT_ID         #Client ID
SOCIAL_AUTH_INSTAGRAM_SECRET = YOUR_CLIENT_SECRET  #Client SECRET
SOCIAL_AUTH_INSTAGRAM_EXTRA_DATA = [         ('user', 'user'),
]

Twitter Keys
SOCIAL_AUTH_TWITTER_KEY = '0svhh85HsaBahhXlYCuQEVmbc'
SOCIAL_AUTH_TWITTER_SECRET = '2zsgeEeh759XiBymwnZS1b9j0UD2mNwv96rlTulAqGfx43MLms'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'KEY'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'SECRET_'


LinkedIn Keys
SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY = env.SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY
SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET = env.SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET
SOCIAL_AUTH_LINKEDIN_OAUTH2_SCOPE = ['r_basicprofile', 'r_emailaddress']
SOCIAL_AUTH_LINKEDIN_OAUTH2_FIELD_SELECTORS = ['email-address', 'formatted-name', 'public-profile-url', 'picture-url']
SOCIAL_AUTH_LINKEDIN_OAUTH2_EXTRA_DATA = [
	('id', 'id'),
	('formattedName', 'name'),
	('emailAddress', 'email_address'),
	('pictureUrl', 'picture_url'),
	('publicProfileUrl', 'profile_url'),
]
'''

# ------------------------------------------------------------------------------#
# ------------------------------------------------------------------------------#

# MAIL SETTING
EMAIL_BACKEND = env.EMAIL_BACKEND
EMAIL_HOST = env.EMAIL_HOST
EMAIL_PORT = env.EMAIL_PORT
EMAIL_HOST_USER = env.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = env.EMAIL_HOST_PASSWORD
EMAIL_USE_TLS = env.EMAIL_USE_TLS
EMAIL_USE_SSL = env.EMAIL_USE_SSL
# DEFAULT_FROM_EMAIL = env.DEFAULT_FROM_EMAIL

# ------------------------------------------------------------------------------#
# ------------------------------------------------------------------------------#


REST_FRAMEWORK = {
	# Use Django's standard `django.contrib.auth` permissions,
	# or allow read-only access for unauthenticated users.
	'DEFAULT_PERMISSION_CLASSES': [
		'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
	]
}
# ------------------------------------------------------------------------------#
# ------------------------------------------------------------------------------#

# GOOGLE RECHAPCHA
 
GOOGLE_RECAPTCHA_SITE_KEY = env.GOOGLE_RECAPTCHA_SITE_KEY_V2
GOOGLE_RECAPTCHA_SECRET_KEY = env.GOOGLE_RECAPTCHA_SECRET_KEY_V2

 
 